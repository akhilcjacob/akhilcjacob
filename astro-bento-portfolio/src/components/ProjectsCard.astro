---
import { Icon } from "astro-icon/components";
import Card from "./Card/index.astro";

const allProjects = [
  {
    title: "inboxhiive",
    description: "SaaS platform transforming podcast audio into rich newsletters",
    tech: "Next.js, Firebase",
    icon: "ri:mail-line",
    link: "#",
    // image: "https://via.placeholder.com/600x400", // example image
    // faviconUrl: "https://www.google.com/s2/favicons?sz=64&domain_url=yourdomain.com"
  },
  {
    title: "Nookly",
    description: "Uber-style home services app for convenient scheduling",
    tech: "Flutter, Firebase",
    icon: "ri:home-line",
    link: "#",
  },
  {
    title: "HypeBridge",
    description: "AI-powered agentic influencer search and outreach",
    tech: "Next.js, Gemini",
    icon: "ri:user-search-line",
    link: "#",
  },
  {
    title: "Skywise",
    description: "Conversational AI weather app with dynamic forecasts",
    tech: "Flutter, GPT API",
    icon: "ri:sun-line",
    link: "https://modrnmagic.app"
  },
  {
    title: "Astro Defender",
    description: "Mobile game exploring game development and advanced mobile frameworks",
    tech: "Flutter",
    icon: "ri:gamepad-line",
    link: "https://modrnmagic.app"
  },
  {
    title: "Flowomoro",
    description: "Minimalist Pomodoro productivity app",
    tech: "Flutter",
    icon: "ri:timer-line",
    link: "https://modrnmagic.app/apps/flowmoro/home"
  },
  {
    title: "Home Automation Platform",
    description: "Distributed platform for IoT device automation with web dashboard",
    tech: "Golang, Vue.js",
    icon: "ri:home-gear-line",
    link: "github.com/akhilcjacob"
  },
  {
    title: "Automated Quadcopter",
    description: "Object tracking and automated flight patterns for drones",
    tech: "Python, OpenCV, Raspberry Pi",
    icon: "ri:flight-takeoff-line",
    link: "github.com/akhilcjacob"
  },
  {
    title: "Antimoz",
    description: "Web analytics tool for user event collection and analysis",
    tech: "Divolte, Kafka, Docker",
    icon: "ri:bar-chart-line",
    link: "github.com/akhilcjacob"
  },
  {
    title: "FIRST Robotics",
    description: "Robot control software with computer vision and PID control",
    tech: "Python, OpenCV",
    icon: "ri:robot-line",
    link: "github.com/akhilcjacob"
  }
];

const recentProjects = allProjects.slice(0, 3);
const additionalCount = allProjects.length - recentProjects.length;
---

<Card colSpan="col-span-2 sm:col-span-2" rowSpan="row-span-2">
  <div class="flex flex-col h-full">
    <!-- Top header section -->
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center gap-2">
        <Icon name="ri:code-box-line" class="h-6 w-6 text-white" />
        <h2 class="text-xl font-bold text-white">Projects</h2>
      </div>
      <button
        id="projectViewMoreBtn"
        class="rounded-lg bg-white/10 px-3 py-1 text-sm text-white/80 hover:bg-white/20 transition-colors"
      >
        View More
      </button>
    </div>

    <!-- Recent Projects List -->
    <div class="flex flex-col space-y-2 flex-1 justify-between" id="projectsContainer">
      <div class="flex flex-col space-y-2">
        {recentProjects.map((project, index) => (
          <div
            key={project.title}
            onClick={() => openProjectModal(index)} 
            class="
              p-3
              rounded-lg
              cursor-pointer
              hover:bg-white/10
              hover:shadow-md
              transition-all
              group
            "
          >
            <div class="flex items-center gap-3">
              <div class="flex h-9 w-9 items-center justify-center rounded-lg bg-white/10">
                <Icon name={project.icon} class="h-5 w-5 text-white" />
              </div>
              <div>
                <div class="flex items-center gap-2">
                  <span class="font-semibold text-white">{project.title}</span>
                  <span class="text-sm text-white/50">/</span>
                  <span class="text-sm text-white/80">{project.tech}</span>
                </div>
                <p class="text-sm text-white/60">{project.description}</p>
              </div>
            </div>
          </div>
        ))}
      </div>

      {additionalCount > 0 && (
        <div class="mt-auto pt-4 text-center border-t border-white/10">
          <button
            id="projectViewMoreBtnBottom"
            class="text-sm text-white/60 hover:text-white/80 transition-colors"
          >
            View {additionalCount} more project{additionalCount > 1 ? 's' : ''}
          </button>
        </div>
      )}
    </div>
  </div>
</Card>

<!-- Projects Modal -->
<div id="projectModal" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/50 backdrop-blur-sm" id="projectModalBackdrop"></div>
  <div class="absolute left-1/2 top-1/2 w-full max-w-3xl -translate-x-1/2 -translate-y-1/2 space-y-6 rounded-xl bg-[#1d1d20] p-6 shadow-xl">
    <!-- Modal Header -->
    <div class="flex items-center justify-between">
      <h2 class="text-2xl font-bold text-white">Projects</h2>
      <button id="closeProjectModal" class="rounded-lg p-2 text-white/80 hover:bg-white/10 transition-colors">
        <Icon name="ri:close-line" class="h-6 w-6" />
      </button>
    </div>

    <!-- Modal Content (Scrollable) -->
    <div class="max-h-[70vh] space-y-6 overflow-y-auto pr-2">
      {allProjects.map((project, index) => (
        <div
          id={`modalProject-${index}`}
          class={`space-y-3 ${index !== 0 ? 'border-t border-white/10 pt-6' : ''}`}
          key={project.title}
        >
          <div class="flex items-start gap-3">
            {/* Favicon Example (optional) */}
            {project.faviconUrl && (
              <img
                src={project.faviconUrl}
                alt={`${project.title} favicon`}
                class="h-12 w-12 object-contain rounded-xl bg-white/10 p-2"
              />
            )}

            {/* If there's no favicon, fallback to your icon or a blank area */}
            {!project.faviconUrl && (
              <div class="flex h-12 w-12 items-center justify-center rounded-xl bg-white/10">
                <Icon name={project.icon} class="h-6 w-6 text-white" />
              </div>
            )}

            <div class="flex-1">
              <div class="flex items-center gap-2">
                <h3 class="text-xl font-semibold text-white">{project.title}</h3>
              </div>
              <div class="mt-1 flex items-center gap-2 text-sm text-white/60">
                <span class="rounded-md bg-white/10 px-2 py-1">{project.tech}</span>
                {project.link && (
                  <a
                    href={project.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="flex items-center gap-1 text-white/60 hover:text-white/80 transition-colors"
                  >
                    <Icon name="ri:link" class="h-4 w-4" />
                    <span>View Project</span>
                  </a>
                )}
              </div>

              {/* Optional Image in Modal */}
              {project.image && (
                <div class="mt-3">
                  <img
                    src={project.image}
                    alt={project.title}
                    class="max-w-full h-auto rounded-md border border-white/10"
                  />
                </div>
              )}

              <p class="mt-2 text-base leading-relaxed text-white/80">
                {project.description}
              </p>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  #projectModal {
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  #projectModal.active {
    opacity: 1;
    visibility: visible;
  }

  #projectModal .max-h-[70vh] {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
  }

  #projectModal .max-h-[70vh]::-webkit-scrollbar {
    width: 6px;
  }

  #projectModal .max-h-[70vh]::-webkit-scrollbar-track {
    background: transparent;
  }

  #projectModal .max-h-[70vh]::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
  }
</style>

<script>
  // Only run this code on the client side
  if (typeof window !== 'undefined') {
    const setupModal = () => {
      const projectViewMoreBtn = document.getElementById('projectViewMoreBtn');
      const projectViewMoreBtnBottom = document.getElementById('projectViewMoreBtnBottom');
      const closeProjectModalBtn = document.getElementById('closeProjectModal');
      const modal = document.getElementById('projectModal');
      const modalBackdrop = document.getElementById('projectModalBackdrop');

      // Helper to open modal
      const openModal = () => {
        modal?.classList.remove('hidden');
        requestAnimationFrame(() => {
          modal?.classList.add('active');
        });
        document.body.style.overflow = 'hidden';
      };

      // Helper to close modal
      const closeModal = () => {
        modal?.classList.remove('active');
        setTimeout(() => {
          modal?.classList.add('hidden');
        }, 300);
        document.body.style.overflow = '';
      };

      // Add event listeners to your "View More" buttons
      projectViewMoreBtn?.addEventListener('click', openModal);
      projectViewMoreBtnBottom?.addEventListener('click', openModal);

      // Click outside the modal or close button
      closeProjectModalBtn?.addEventListener('click', closeModal);
      modalBackdrop?.addEventListener('click', closeModal);

      // Close on Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal?.classList.contains('active')) {
          closeModal();
        }
      });

      // Function that opens modal and auto-scrolls to the project
      window.openProjectModal = (index) => {
        openModal();
        // small timeout so the items can render
        setTimeout(() => {
          const projectDiv = document.getElementById(`modalProject-${index}`);
          if (projectDiv) {
            projectDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }, 200);
      };
    };

    // Run setup when the DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupModal);
    } else {
      setupModal();
    }
  }
</script>
